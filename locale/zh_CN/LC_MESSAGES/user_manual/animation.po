msgid ""
msgstr ""
"Project-Id-Version: kdeorg\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-22 03:26+0100\n"
"PO-Revision-Date: 2019-04-09 18:49\n"
"Last-Translator: guoyunhe <i@guoyunhe.me>\n"
"Language-Team: Chinese Simplified\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: crowdin.com\n"
"X-Crowdin-Project: kdeorg\n"
"X-Crowdin-Language: zh-CN\n"
"X-Crowdin-File: /kf5-trunk/messages/www/"
"docs_krita_org_user_manual___animation.pot\n"
"Language: zh_CN\n"

#: ../../<rst_epilog>:2
msgid ""
".. image:: images/icons/Krita_mouse_left.png\n"
"   :alt: mouseleft"
msgstr ""
".. image:: images/icons/Krita_mouse_left.png\n"
"   :alt: 鼠标左键"

#: ../../<rst_epilog>:4
msgid ""
".. image:: images/icons/Krita_mouse_right.png\n"
"   :alt: mouseright"
msgstr ""
".. image:: images/icons/Krita_mouse_right.png\n"
"   :alt: 鼠标右键"

#: ../../user_manual/animation.rst:1
msgid "Detailed guide on the animation workflow in Krita."
msgstr "详细介绍 Krita 的动画制作流程。"

#: ../../user_manual/animation.rst:18
msgid "Animation with Krita"
msgstr "动画制作"

#: ../../user_manual/animation.rst:20
msgid ""
"Thanks to the 2015 Kickstarter, :program:`Krita 3.0` now has animation. In "
"specific, :program:`Krita` has frame-by-frame raster animation. There's "
"still a lot of elements missing from it, like tweening, but the basic "
"workflow is there."
msgstr ""
"作为 2015 年度 Kickstarter 筹款活动的一项重要目标， :program:`Krita 3.0` 实现"
"了动画制作功能，可用于制作逐帧栅格动画。尽管依然缺少了包括补间在内的大量功"
"能，但基本的动画制作流程已经就位了。"

#: ../../user_manual/animation.rst:25
msgid ""
"To access the animation features, the easiest way is to change your "
"workspace to Animation. This will make the animation dockers and workflow "
"appear."
msgstr ""
"要使用动画功能，最直接的办法就是把工作空间更改为“Animation (动画)”。工作空间"
"将显示与动画有关的各个工具面板和制作流程。"

#: ../../user_manual/animation.rst:30
msgid "Animation curves"
msgstr "动画曲线"

#: ../../user_manual/animation.rst:32
msgid ""
"To create an animation curve (currently only for opacity) expand the :"
"guilabel:`New Frame` button in the :guilabel:`Animation` dock and click :"
"guilabel:`Add Opacity Keyframe`. You can now edit the keyframed value for "
"opacity directly in the “Layers” dock, adding more keyframes will by default "
"fade from the last to the next upcoming keyframe in the timeline over the "
"frames between them. See :ref:`animation curves <animation_curves_docker>` "
"for details"
msgstr ""
"要创建动画曲线 (目前仅支持不透明度)，可在:guilabel:`动画` 面板点击 :guilabel:"
"`创建空白帧` 按钮右侧的下箭头，在弹出的菜单中选择 :guilabel:`添加不透明度关键"
"帧` 。现在你可以在“图层”面板中直接编辑该关键帧的不透明度。位于两个不透明度关"
"键帧之间的各个关键帧的透明度将按照前后两个不透明度关键帧的透明度进行过渡。详"
"情请见 :ref:`动画曲线 <animation_curves_docker>` 章节。"

#: ../../user_manual/animation.rst:40
msgid "Workflow"
msgstr "制作流程"

#: ../../user_manual/animation.rst:42
msgid ""
"In traditional animation workflow, what you do is that you make *key "
"frames*, which contain the important poses, and then draw frames in between "
"(\\ *tweening* in highly sophisticated animator's jargon)."
msgstr ""
"在传统动画的制作流程中，动画师首先绘制 *关键帧*，它们包含了重要的镜头和动作，"
"然后在这些关键帧之间绘制过渡的动画帧 (动画行业术语为“中间画”)。"

#: ../../user_manual/animation.rst:46
msgid "For this workflow, there are three important dockers:"
msgstr "Krita 的动画制作流程要用到三个重要的工具面板："

#: ../../user_manual/animation.rst:48
msgid ""
"The :ref:`timeline_docker`. View and control all of the frames in your "
"animation. The timeline docker also contains functions to manage your "
"layers. The layer that are created in the timeline docker also appear on the "
"normal Layer docker."
msgstr ""
":ref:`timeline_docker` 。用于查看和控制当前动画的全部动画帧。该面板还具备图层"
"管理功能。在时间线面板中创建的图层也会被显示在一般图层面板。"

#: ../../user_manual/animation.rst:52
msgid ""
"The :ref:`animation_docker`. This docker contains the play buttons as the "
"ability to change the frame-rate, playback speed and useful little options "
"like :guilabel:`auto-key framing`."
msgstr ""
":ref:`animation_docker` 。提供播放和切换帧按钮，具有更改帧率、回访速度和 :"
"guilabel:`自动帧` 模式等选项。"

#: ../../user_manual/animation.rst:55
msgid ""
"The :ref:`onion_skin_docker`. This docker controls the look of the onion "
"skin, which in turn is useful for seeing the previous frame."
msgstr ""
":ref:`onion_skin_docker` 。控制洋葱皮视图功能的显示方式，用于观察当前帧的前后"
"帧。"

#: ../../user_manual/animation.rst:60
msgid "Introduction to animation: How to make a walkcycle"
msgstr "动画入门：如何绘制步态循环"

#: ../../user_manual/animation.rst:62
msgid ""
"The best way to get to understand all these different parts is to actually "
"use them. Walk cycles are considered the most basic form of a full "
"animation, because of all the different parts involved with them. Therefore, "
"going over how one makes a walkcycle should serve as a good introduction."
msgstr ""
"想要熟悉这些功能，最好的办法就是去使用它们。步态循环一般被认为是全动画的最基"
"础的形态，因为它要涉及到动画制作的每一方面，所以通过学习制作一组步态循环来入"
"门是再合适不过了。"

#: ../../user_manual/animation.rst:69
msgid "Setup"
msgstr "初始设置"

#: ../../user_manual/animation.rst:71
msgid "First, we make a new file:"
msgstr "首先我们要创建一个新文档："

#: ../../user_manual/animation.rst:74
msgid ".. image:: images/en/Introduction_to_animation_01.png"
msgstr ".. image:: images/en/Introduction_to_animation_01.png"

#: ../../user_manual/animation.rst:75
msgid ""
"On the first tab, we type in a nice ratio like 1280x1024, set the dpi to 72 "
"(we're making this for screens after all) and title the document 'walkcycle'."
msgstr ""
"打开新建文档对话框，在自定义文档的尺寸页面上，将文档尺寸设为 1280 x 1024，分"
"辨率设为 72 ppi (因为它将用于屏幕显示)，把文档名字命名为“walkcycle” (步态循"
"环)。"

#: ../../user_manual/animation.rst:79
msgid ""
"In the second tab, we choose a nice background color, and set the background "
"to canvas-color. This means that Krita will automatically fill in any "
"transparent bits with the background color. You can change this in :"
"menuselection:`Image --> Image Properties`. This seems to be most useful to "
"people doing animation, as the layer you do animation on MUST be semi-"
"transparent to get onion skinning working."
msgstr ""
"切换到内容页面，我们可以指定一个看起来舒服的背景色，然后选中“作为画布颜色”。"
"这样 Krita 将自动在背景的透明区域填充指定的背景色。你还可以在菜单栏的 :"
"menuselection:`图像 --> 属性` 处对此进行更改。这一设置对于动画制作尤其重要，"
"这是因为洋葱皮显示功能必须要在一个含透明度的图层上才可生效。"

#: ../../user_manual/animation.rst:82
msgid ""
"Krita has a bunch of functionality for meta-data, starting at the :guilabel:"
"`Create Document` screen. The title will be automatically used as a "
"suggestion for saving and the description can be used by databases, or for "
"you to leave comments behind. Not many people use it individually, but it "
"can be useful for working in larger groups."
msgstr ""
"Krita 有一系列与元数据相关的功能。 :guilabel:`创建新文档` 对话框里面就有不"
"少。文档标题可以在保存图像时自动用作新文件名候选，而描述则可以被数据库抓取，"
"也可以用来留言。尽管单枪匹马的作者应该用不着这些东西，但在大团队协作时将派上"
"用场。"

#: ../../user_manual/animation.rst:84
msgid "Then hit :guilabel:`Create`!"
msgstr "现在点击 :guilabel:`创建` 按钮，完成新文档的创建吧！"

#: ../../user_manual/animation.rst:86
msgid ""
"Then, to get all the necessary tools for animation, select the workspace "
"switcher:"
msgstr ""
"接下来我们要显示动画制作流程的所需工具面板。点击窗口右上角的工作空间选择按"
"钮："

#: ../../user_manual/animation.rst:91
msgid ".. image:: images/en/Introduction_to_animation_02.png"
msgstr ".. image:: images/en/Introduction_to_animation_02.png"

#: ../../user_manual/animation.rst:91
msgid "The red arrow points at the workspace switcher."
msgstr "红色箭头所指的就是工作空间切换按钮。"

#: ../../user_manual/animation.rst:93
msgid "And select the animation workspace."
msgstr "从弹出的可用工作空间列表中选择 “Animation” (动画)。"

#: ../../user_manual/animation.rst:95
msgid "Which should result in this:"
msgstr "工作空间切换后效果如下："

#: ../../user_manual/animation.rst:98
msgid ".. image:: images/en/Introduction_to_animation_03.png"
msgstr ".. image:: images/en/Introduction_to_animation_03.png"

#: ../../user_manual/animation.rst:99
msgid ""
"The animation workspace adds the timeline, animation and onion skin dockers "
"at the bottom."
msgstr ""
"动画工作空间会把时间线和动画面板放置在窗口的底部。要显示洋葱皮面板，点击动画"
"面板的洋葱皮按钮。"

#: ../../user_manual/animation.rst:103
msgid "Animating"
msgstr "绘制动画"

#: ../../user_manual/animation.rst:105
msgid ""
"We have two transparent layers set up. Let's name the bottom one "
"'environment' and the top 'walkcycle' by double clicking their names in the "
"layer docker."
msgstr ""
"我们新建的文档里有两张透明图层。双击图层名称可以重命名图层。把下面的图层命名"
"为“environment” (环境)，把上面的图层命名为“walkcycle” (步态循环)。"

#: ../../user_manual/animation.rst:110
msgid ".. image:: images/en/Introduction_to_animation_04.png"
msgstr ".. image:: images/en/Introduction_to_animation_04.png"

#: ../../user_manual/animation.rst:111
msgid ""
"Use the straight line tool to draw a single horizontal line. This is the "
"ground."
msgstr "用直线工具画一条水平线，这将是我们的地面。"

#: ../../user_manual/animation.rst:115
msgid ".. image:: images/en/Introduction_to_animation_05.png"
msgstr ".. image:: images/en/Introduction_to_animation_05.png"

#: ../../user_manual/animation.rst:116
msgid ""
"Then, select the 'walkcycle' layer and draw a head and torso (you can use "
"any brush for this)."
msgstr "然后选中步态循环图层，随便选择一种笔刷，把人物的头部和躯干画出来。"

#: ../../user_manual/animation.rst:118
msgid ""
"Now, selecting a new frame will not make a new frame automatically. Krita "
"doesn't actually see the 'walkcycle' layer as an animated layer at all!"
msgstr ""
"接下来让我们把注意力转向时间轴面板。我们可以看到时间轴里面空无一物。这是因为"
"我们还没有将图层添加成一个动画帧，所以 Krita 不把它视作动画的一部分。"

#: ../../user_manual/animation.rst:123
msgid ".. image:: images/en/Introduction_to_animation_06.png"
msgstr ".. image:: images/en/Introduction_to_animation_06.png"

#: ../../user_manual/animation.rst:124
msgid ""
"We can make it animatable by adding a frame to the timeline. |mouseright| a "
"frame in the timeline to get a context menu. Choose :guilabel:`New Frame`."
msgstr ""
"想要把图层变为动画的一部分，我们必须先在时间线上添加一个动画帧。在时间线的空"
"槽上右键单击 |mouseright| ，在右键菜单中选中 :guilabel:`创建空白帧`。"

#: ../../user_manual/animation.rst:128
msgid ".. image:: images/en/Introduction_to_animation_07.png"
msgstr ".. image:: images/en/Introduction_to_animation_07.png"

#: ../../user_manual/animation.rst:129
msgid ""
"You can see it has become an animated layer because of the onion skin icon "
"showing up in the timeline docker."
msgstr ""
"你会发现该图层现在多了一个灯泡状的图标，它是洋葱皮视图的开关。这意味着这个图"
"层已经成为了动画图层。"

#: ../../user_manual/animation.rst:133
msgid ".. image:: images/en/Introduction_to_animation_08.png"
msgstr ".. image:: images/en/Introduction_to_animation_08.png"

#: ../../user_manual/animation.rst:134
msgid ""
"Use the :guilabel:`Copy Frame` button to copy the first frame onto the "
"second. Then, use the with :kbd:`Shift + ↑` to move the frame contents up."
msgstr ""
"在前一帧的后面的时间槽里右键单击，选中 :guilabel:`创建重复帧` ，这会把前一帧"
"的内容复制为第二帧。现在按 :kbd:`Shift + ↑` ，把第二帧的内容在画面上上移一"
"些。"

#: ../../user_manual/animation.rst:138
msgid "We can see the difference by turning on the onionskinning:"
msgstr "现在点击时间线左边的灯泡图标，启用洋葱皮显示："

#: ../../user_manual/animation.rst:141
msgid ".. image:: images/en/Introduction_to_animation_09.png"
msgstr ".. image:: images/en/Introduction_to_animation_09.png"

#: ../../user_manual/animation.rst:142
msgid "Now, you should see the previous frame as red."
msgstr "现在你可以看到前一帧的内容被显示为红色。"

#: ../../user_manual/animation.rst:145
msgid ""
"Krita sees white as a color, not as transparent, so make sure the animation "
"layer you are working on is transparent in the bits where there's no "
"drawing. You can fix the situation by use the :ref:`filter_color_to_alpha` "
"filter, but prevention is best."
msgstr ""
"Krita 把白色也视作一种颜色，而不是把它当成透明。所以你要确保用来绘制动画的图"
"层在没有内容的区域是透明的。如果你不小心把动画图层整个填充了底色，可以使用 :"
"ref:`filter_color_to_alpha` 滤镜来补救，但比起亡羊补牢，注意预防更重要。"

#: ../../user_manual/animation.rst:148
msgid ".. image:: images/en/Introduction_to_animation_10.png"
msgstr ".. image:: images/en/Introduction_to_animation_10.png"

#: ../../user_manual/animation.rst:149
msgid ""
"Future frames are drawn in green, and both colors can be configured in the "
"onion skin docker."
msgstr ""
"未来帧的内容则会被显示为绿色。过去帧和未来帧的显示颜色可以在洋葱皮面板中进行"
"更改。要显示洋葱皮面板，点击动画面板的洋葱按钮。"

#: ../../user_manual/animation.rst:153
msgid ".. image:: images/en/Introduction_to_animation_11.png"
msgstr ".. image:: images/en/Introduction_to_animation_11.png"

#: ../../user_manual/animation.rst:154
msgid ""
"Now, we're gonna draw the two extremes of the walkcycle. These are the pose "
"where both legs are as far apart as possible, and the pose where one leg is "
"full stretched and the other pulled in, ready to take the next step."
msgstr ""
"接下来是时候画出步态循环动作的两个极端了。其一是两脚迈得最开时的动作，其二是"
"一条腿完全伸直，另一条腿屈曲，准备向前迈出的动作。"

#: ../../user_manual/animation.rst:159
msgid ""
"Now, let's copy these two... We could do that with :kbd:`Ctrl + drag`, but "
"here comes a tricky bit:"
msgstr ""
"现在我们要把这两帧复制到时间槽 2 和 3。要注意的是鼠标拖动在时间线面板里的工作"
"方式有点不一样。直接拖动鼠标不会选中多个帧，而是会移动点击到的第一个帧。要选"
"中多个帧，必须按住 :kbd:`Ctrl` 进行拖放。:kbd:`Ctrl + 左键单击` |mouseleft| "
"也可以选中或者取消选择动画帧。"

#: ../../user_manual/animation.rst:163
msgid ".. image:: images/en/Introduction_to_animation_12.png"
msgstr ".. image:: images/en/Introduction_to_animation_12.png"

#: ../../user_manual/animation.rst:164
msgid ""
":kbd:`Ctrl +` |mouseleft| also selects and deselects frames, so to copy..."
msgstr "现在让我们再试一次，把动画帧 0、1 复制到时间槽 2、3："

#: ../../user_manual/animation.rst:166
msgid ":kbd:`Ctrl +` |mouseleft| to select all the frames you want to select."
msgstr ""
"首先，用 :kbd:`Ctrl + 鼠标左键` |mouseleft| 来选中需要复制的帧。被选中的帧会"
"显示为橙色，如上图。"

#: ../../user_manual/animation.rst:167
msgid ""
":kbd:`Ctrl + drag`. You need to make sure the first frame is 'orange', "
"otherwise it won't be copied along."
msgstr "接着，用 :kbd:`Ctrl + 拖放` 把动画帧 0、1 拖放到时间槽 2、3。"

#: ../../user_manual/animation.rst:170
msgid "Now then..."
msgstr "接下来我们要播放这个循环："

#: ../../user_manual/animation.rst:175
msgid ".. image:: images/en/Introduction_to_animation_13.png"
msgstr ".. image:: images/en/Introduction_to_animation_13.png"

#: ../../user_manual/animation.rst:175
msgid "squashed the timeline docker a bit to save space"
msgstr ""
"如果左侧工具面板空间不够，你可以把动画面板和洋葱皮面板拖放到底侧空间，和时间"
"线面板并排。"

#: ../../user_manual/animation.rst:177
msgid "Copy frame 0 to frame 2"
msgstr "确认动画帧 0 已被复制到 帧 2。"

#: ../../user_manual/animation.rst:178
msgid "Copy frame 1 to frame 3"
msgstr "确认动画帧 1 已被复制到 帧 3。"

#: ../../user_manual/animation.rst:179
msgid "In the animation docker, set the frame-rate to 4"
msgstr "在动画面板中，把帧率设为 4。"

#: ../../user_manual/animation.rst:180
msgid "select all frames in the timeline docker by dragging-selecting them."
msgstr "用 Ctrl + 拖动在时间线里面选中所有 4 个帧。"

#: ../../user_manual/animation.rst:181
msgid "press play in the animation docker."
msgstr "按下动画面板中的播放按钮。"

#: ../../user_manual/animation.rst:182
msgid "Enjoy your first animation!"
msgstr "你的第一条动画就做好了！"

#: ../../user_manual/animation.rst:185
msgid "Expanding upon your rough walkcycle"
msgstr "添加并绘制中间画"

#: ../../user_manual/animation.rst:188
msgid ".. image:: images/en/Introduction_to_animation_14.png"
msgstr ".. image:: images/en/Introduction_to_animation_14.png"

#: ../../user_manual/animation.rst:189
msgid ""
"You can quickly make some space by :kbd:`Alt+dragging` any frame. This'll "
"move that frame and all others after it in one go."
msgstr ""
"要在相邻的动画帧之间插入一些时间槽，按 :kbd:`Alt + 拖动` 任意帧，这将把该帧和"
"它后面的帧一起整体移动。"

#: ../../user_manual/animation.rst:192
msgid "Then draw inbetweens on each frame that you add"
msgstr "然后在已有动画帧之间的空时间槽中插入并绘制中间帧。"

#: ../../user_manual/animation.rst:195
msgid ".. image:: images/en/Introduction_to_animation_16.png"
msgstr ".. image:: images/en/Introduction_to_animation_16.png"

#: ../../user_manual/animation.rst:196
msgid ""
"You'll find that the more frames you add, the more difficult it becomes to "
"keep track of the onion skins."
msgstr "不过你很快会发现，插入的帧越多，用洋葱皮视图追踪前后帧就越困难。"

#: ../../user_manual/animation.rst:198
msgid ""
"You can modify the onion skin by using the onion skin docker, where you can "
"change how many frames are visible at once, by toggling them on the top row. "
"The bottom row is for controlling transparency, while below there you can "
"modify the colors and extremity of the coloring."
msgstr ""
"你可以用洋葱皮视图面板对洋葱皮的显示方式进行修改。点击顶栏的数字可以控制该帧"
"数位置的洋葱皮显示开关，数字越大，与当前帧离得越远。数字栏下方的柱状图可以控"
"制透明度的变化。面板下方的色块和滑动条可以调整颜色和着色强度。"

#: ../../user_manual/animation.rst:204
msgid ".. image:: images/en/Introduction_to_animation_15.png"
msgstr ".. image:: images/en/Introduction_to_animation_15.png"

#: ../../user_manual/animation.rst:206
msgid "Animating with multiple layers"
msgstr "制作多图层动画"

#: ../../user_manual/animation.rst:208
msgid ""
"Okay, our walkcycle is missing some hands, let's add them on a separate "
"layer. So we make a new layer, and name it hands and..."
msgstr ""
"这个步态循环还缺了一双手，我们打算在别的图层上绘制它们。现在到图层面板，或者"
"在时间线面板的左上角按“+”按钮，新建一个图层，把它命名为“hands” (手)。可现在问"
"题来了……"

#: ../../user_manual/animation.rst:212
msgid ".. image:: images/en/Introduction_to_animation_17.png"
msgstr ".. image:: images/en/Introduction_to_animation_17.png"

#: ../../user_manual/animation.rst:213
msgid ""
"Our walkcycle is gone from the timeline docker! This is a feature actually. "
"A full animation can have so many little parts that an animator might want "
"to remove the layers they're not working on from the timeline docker. So you "
"manually have to add them."
msgstr ""
"刚才画的步态循环从时间线面板上消失了！不必担心，这其实是时间线和图层的协同显"
"示功能。在全动画制作流程里，画面的组成部分可能会有很多，动画师有时需要将一些"
"当前无需处理的部分从时间线上隐藏起来。你可以手动将它们添加进来。"

#: ../../user_manual/animation.rst:219
msgid ".. image:: images/en/Introduction_to_animation_18.png"
msgstr ".. image:: images/en/Introduction_to_animation_18.png"

#: ../../user_manual/animation.rst:220
msgid ""
"You can show any given layer in the timeline by doing |mouseright| on the "
"layer in the layer docker, and toggling :guilabel:`Show in Timeline`."
msgstr ""
"要把任意图层显示在时间轴，在图层列表中右键单击 |mouseright| ，勾选 :guilabel:"
"`显示在时间轴` 。"

#: ../../user_manual/animation.rst:224
msgid ".. image:: images/en/Introduction_to_animation_19.png"
msgstr ".. image:: images/en/Introduction_to_animation_19.png"

#: ../../user_manual/animation.rst:226
msgid "Exporting"
msgstr "导出"

#: ../../user_manual/animation.rst:228
msgid "When you are done, select :menuselection:`File --> Render Animation`"
msgstr ""
"动画制作完成后，接下来就要把它导出。在菜单栏选择 :menuselection:`文件 --> 渲"
"染动画` 。"

#: ../../user_manual/animation.rst:231
msgid ".. image:: images/en/Introduction_to_animation_20.png"
msgstr ".. image:: images/en/Introduction_to_animation_20.png"

#: ../../user_manual/animation.rst:232
msgid ""
"It's recommended to save out your file as a png, and preferably in its own "
"folder. Krita can currently only export png sequences."
msgstr ""
"在渲染动画对话框，选中“图像序列”。Krita 目前只能导出 PNG 图像序列，所以要在图"
"像序列选项中把文件格式设为“PNG 图像”。为避免混乱，最好为输出的图像序列指定一"
"个单独的文件夹。"

#: ../../user_manual/animation.rst:236
msgid ".. image:: images/en/Introduction_to_animation_21.png"
msgstr ".. image:: images/en/Introduction_to_animation_21.png"

#: ../../user_manual/animation.rst:237
msgid ""
"When pressing done, you can see the status of the export in the status bar "
"below."
msgstr ""
"点击确定按钮后 Krita 将开始渲染动画。渲染过程可长可短，你可以在窗口的底部的状"
"态栏观察导出进度。"

#: ../../user_manual/animation.rst:241
msgid ".. image:: images/en/Introduction_to_animation_22.png"
msgstr ".. image:: images/en/Introduction_to_animation_22.png"

#: ../../user_manual/animation.rst:242
msgid ""
"The images should be saved out as filenameXXX.png, giving their frame number."
msgstr "该图像序列将被保存成“文件名XXXX.png”的格式，XXXX后缀为该张图像的帧号。"

#: ../../user_manual/animation.rst:245
msgid ""
"Then use something like Gimp (Linux, OSX, Windows), ImageMagick (Linux, OSX, "
"Windows), or any other gif creator to make a gif out of your image sequence:"
msgstr ""
"接下来你便可以使用 GIMP、ImageMagick 等工具来把该图像序列合成为一个 GIF 动画"
"了："

#: ../../user_manual/animation.rst:250
msgid ".. image:: images/en/Introduction_to_animation_walkcycle_02.gif"
msgstr ".. image:: images/en/Introduction_to_animation_walkcycle_02.gif"

#: ../../user_manual/animation.rst:251
msgid ""
"For example, you can use `VirtualDub <http://www.virtualdub.org/>`__\\ "
"(Windows) and open all the frames and then go to :menuselection:`File --> "
"Export --> GIF`."
msgstr ""
"在 Windows 下面还可以使用 `VirtualDub <http://www.virtualdub.org/>`_ ，在里面"
"打开所有帧的图像，然后在菜单栏选择 :menuselection:`File --> Export --> "
"GIF` 。"

#: ../../user_manual/animation.rst:255
msgid "Enjoy your walkcycle!"
msgstr "好好欣赏你的步态循环大作吧！"

#: ../../user_manual/animation.rst:259
msgid ""
"Krita 3.1 has a render animation feature. If you're using the 3.1 beta, "
"check out the :ref:`render_animation` page for more information!"
msgstr ""
"Krita 从 3.1 版开始支持直接渲染为动画。详情请参考 :ref:`render_animation` 页"
"面。"

#: ../../user_manual/animation.rst:262
msgid "Importing animation frames"
msgstr "导入动画帧"

#: ../../user_manual/animation.rst:264
msgid "You can import animation frames in Krita 3.0."
msgstr "从 Krita 3.0 版开始你也可以导入动画帧。"

#: ../../user_manual/animation.rst:266
msgid ""
"First let us take a sprite sheet from Open Game Art. (This is the Libre "
"Pixel Cup male walkcycle)"
msgstr ""
"首先，让我们从 Open Game Art 网站找一张像素拼合图。(以 Libre Pixel Cup male "
"walkcycle 为例) "

#: ../../user_manual/animation.rst:269
msgid ""
"And we'll use :menuselection:`Image --> Split Image` to split up the sprite "
"sheet."
msgstr ""
"在菜单栏找到 :menuselection:`图像 --> 分割图像` ，把像素拼合图进行分割。"

#: ../../user_manual/animation.rst:272
msgid ".. image:: images/en/Animation_split_spritesheet.png"
msgstr ".. image:: images/en/Animation_split_spritesheet.png"

#: ../../user_manual/animation.rst:273
msgid ""
"The slices are even, so for a sprite sheet of 9 sprites, use 8 vertical "
"slices and 0 horizontal slices. Give it a proper name and save it as png."
msgstr ""
"这个拼合图内含 9 张图，所以我们要把它分成 9 块。将垂直分割线设为 8 条，水平分"
"割线设为 0 条，随便输入一个文件名前缀，文件类型为 PNG，点击应用。图像将被分割"
"为均等大小。"

#: ../../user_manual/animation.rst:275
msgid ""
"Then, make a new canvas, and select :menuselection:`File --> Import "
"Animation Frames`. This will give you a little window. Select :guilabel:`Add "
"images`. This should get you a file browser where you can select your images."
msgstr ""
"然后，我们新建一个文档，在菜单栏选择 :menuselection:`文件 --> 导入动画帧` 。"
"在弹出的对话框中点击 :guilabel:`添加图像` ，从导入图像对话框中找到刚才分割的"
"拼合图。"

#: ../../user_manual/animation.rst:278
msgid ".. image:: images/en/Animation_import_sprites.png"
msgstr ".. image:: images/en/Animation_import_sprites.png"

#: ../../user_manual/animation.rst:279
msgid "You can select multiple images at once."
msgstr "你可以同时选中多个图像进行导入。"

#: ../../user_manual/animation.rst:282
msgid ".. image:: images/en/Animation_set_everything.png"
msgstr ".. image:: images/en/Animation_set_everything.png"

#: ../../user_manual/animation.rst:283
msgid ""
"The frames are currently automatically ordered. You can set the ordering "
"with the top-left two drop-down boxes."
msgstr ""
"准备导入的动画帧将被自动排序。你也可以在对话框右侧栏的“排序”下拉菜单对排序方"
"式进行调整。"

#: ../../user_manual/animation.rst:286
msgid "Start"
msgstr "首帧"

#: ../../user_manual/animation.rst:287
msgid "Indicates at which point the animation should be imported."
msgstr "此参数指定从第几帧开始导入该动画帧序列。"

#: ../../user_manual/animation.rst:289
msgid ""
"Indicates the difference between the imported animation and the document "
"frame rate. This animation is 8 frames big, and the fps of the document is "
"24 frames, so there should be a step of 3 to keep it even. As you can see, "
"the window gives feedback on how much fps the imported animation would be "
"with the currently given step."
msgstr ""
"此参数指定导入的每张图像在动画中停留的帧数。下方的“源帧率”会自动按照此数值和"
"当前文档帧率来计算出被导入动画序列的理想原始帧率。在本例中，动画文档的帧率为 "
"24，因此当帧长为 3 时，可推算出导入图像序列的理想源帧率为 8，这和我们将要导入"
"的序列是一致的。"

#: ../../user_manual/animation.rst:293
msgid "Step"
msgstr "帧长"

#: ../../user_manual/animation.rst:295
msgid ""
"Press :guilabel:`OK`, and your animation should be imported as a new layer."
msgstr "点击 :guilabel:`确定` ，你的图像序列将会被导入到一个新的动画图层。"

#: ../../user_manual/animation.rst:298
msgid ".. image:: images/en/Animation_import_done.png"
msgstr ".. image:: images/en/Animation_import_done.png"

#: ../../user_manual/animation.rst:300
msgid "Reference"
msgstr "参考资料"

#: ../../user_manual/animation.rst:302
msgid "https://community.kde.org/Krita/Docs/AnimationGuiFeaturesList"
msgstr "https://community.kde.org/Krita/Docs/AnimationGuiFeaturesList"

#: ../../user_manual/animation.rst:303
msgid ""
"`The source for the libre pixel cup male walkmediawiki cycle <http://"
"opengameart.org/content/liberated-pixel-cup-lpc-base-assets-sprites-map-"
"tiles>`_"
msgstr ""
"`文中例子所用的 Libre pixel cup male walkcycle <http://opengameart.org/"
"content/liberated-pixel-cup-lpc-base-assets-sprites-map-tiles>`_"
