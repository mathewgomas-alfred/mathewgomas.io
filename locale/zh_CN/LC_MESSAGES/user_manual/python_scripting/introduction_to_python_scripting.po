msgid ""
msgstr ""
"Project-Id-Version: kdeorg\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-04 03:33+0200\n"
"PO-Revision-Date: 2019-05-05 22:26\n"
"Last-Translator: Guo Yunhe (guoyunhe)\n"
"Language-Team: Chinese Simplified\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: crowdin.com\n"
"X-Crowdin-Project: kdeorg\n"
"X-Crowdin-Language: zh-CN\n"
"X-Crowdin-File: /kf5-trunk/messages/www/"
"docs_krita_org_user_manual___python_scripting___introduction_to_python_scripting."
"pot\n"

#: ../../<rst_epilog>:188
msgid "-DENABLE_PYTHON_2=ON"
msgstr ""

#: ../../user_manual/python_scripting/introduction_to_python_scripting.rst:1
msgid "Introduction to using Krita's python plugin API."
msgstr "介绍 Krita 的 Python 插件 API。"

#: ../../user_manual/python_scripting/introduction_to_python_scripting.rst:13
msgid "Python"
msgstr ""

#: ../../user_manual/python_scripting/introduction_to_python_scripting.rst:13
msgid "Python Scripting"
msgstr ""

#: ../../user_manual/python_scripting/introduction_to_python_scripting.rst:13
msgid "Scripting"
msgstr ""

#: ../../user_manual/python_scripting/introduction_to_python_scripting.rst:13
msgid "Plugin"
msgstr ""

#: ../../user_manual/python_scripting/introduction_to_python_scripting.rst:13
msgid "Debug"
msgstr ""

#: ../../user_manual/python_scripting/introduction_to_python_scripting.rst:18
msgid "Introduction to Python Scripting"
msgstr "Krita Python 脚本编程入门"

#: ../../user_manual/python_scripting/introduction_to_python_scripting.rst:22
msgid ""
"When we offered python scripting as one of Kickstarter Stretchgoals we could "
"implement next to vectors and text, it won the backer vote by a landslide. "
"Some people even only picked python and nothing else. So what exactly is "
"python scripting?"
msgstr ""
"我们曾经在 Kickstarter 筹款活动中把 Python 脚本、矢量图形、文字工具三者作为候"
"选延伸目标，结果 Python 脚本以压倒性的优势赢得了支持者投票。不少人甚至只给 "
"Python 功能投了票。那么 Python 脚本编程究竟是何方神圣呢？"

#: ../../user_manual/python_scripting/introduction_to_python_scripting.rst:25
msgid "What is Python Scripting?"
msgstr "Python 脚本简介"

#: ../../user_manual/python_scripting/introduction_to_python_scripting.rst:27
msgid ""
"Python is a scripting language, that can be used to automate tasks. What "
"python scripting in Krita means is that we added an API to krita, which is a "
"bit of programming that allows python to access to parts of Krita. With this "
"we can make dockers, perform menial tasks on a lot of different files and "
"even write our own exporters. People who work with computer graphics, like "
"VFX and video game artists use python a lot to make things like sprite "
"sheets, automate parts of export and more."
msgstr ""
"Python 是一种脚本语言，可以用来编写一些自动化任务。对 Krita 来说，支持 "
"Python 编程意味着我们为 Krita 打造了一个 API (编程接口)，让 Python 脚本可以访"
"问 Krita 的各项功能，这样我们便可以用 Python 脚本来打造工具面板、执行低级而量"
"大的重复性文件操作，甚至制作定制化的导出功能。在计算机图形业界，如特效、游戏"
"行业的从业人员可以借助 Python 编程来组织拼合图、自动化一些导出操作等，提高工"
"作效率。"

#: ../../user_manual/python_scripting/introduction_to_python_scripting.rst:29
msgid ""
"It is outside the scope of this manual to teach you python itself. However, "
"as python is an extremely popular programming language and great for "
"beginners, there's tons of learning material around that can be quickly "
"found with a simple 'learn python' internet search."
msgstr ""
"Python 编程教学并非本使用手册的内容范畴。考虑到 Python 是一种既流行又好学的编"
"程语言，找到学习它的资源想必不会是一件难事。随便在网上搜索“Python 入门”估计就"
"能得到无数结果。"

#: ../../user_manual/python_scripting/introduction_to_python_scripting.rst:31
msgid ""
"This manual will instead focus on how to use python to automate and extend "
"Krita. For that we'll first start with the basics: How to run Python "
"commands in the scripter."
msgstr ""
"本手册会把注意力放在如何使用 Python 为 Krita 进行自动化和扩展功能上面。现在，"
"让我们学习基础中的基础：如何在脚本工具里面执行 Python 指令。"

#: ../../user_manual/python_scripting/introduction_to_python_scripting.rst:35
msgid "How to Enable the Scripter Plugin"
msgstr "如何启用脚本工具插件"

#: ../../user_manual/python_scripting/introduction_to_python_scripting.rst:37
msgid ""
"The scripter plugin is not necessary to use python, but it is very useful "
"for testing and playing around with python. It is a python console, written "
"in python, which can be used to write small scripts and execute them on the "
"fly."
msgstr ""
"你并不是非得通过脚本工具插件才能在 Krita 里面执行 Python 脚本，但它在调试 "
"Python 脚本时非常好用。它是一个用 Python 编写的 Python 脚本控制台，你可以在它"
"里面直接编写和执行脚本片段。"

#: ../../user_manual/python_scripting/introduction_to_python_scripting.rst:39
msgid ""
"To open the scripter, navigate to :menuselection:`Tools --> Scripts --> "
"Scripter`. If you don't see it listed, go to :menuselection:`Settings --> "
"Configure Krita --> Python Plugin Manager` and toggle \"Scripter\" in the "
"list to enable it. If you don't see the scripter plugin, make sure you are "
"using an up-to-date version of Krita."
msgstr ""
"要打开脚本工具插件，在菜单栏点击 :menuselection:`工具 --> 脚本 --> 脚本工具"
"` 。如果看不到该工具，在菜单栏点击 :menuselection:`设置 --> 配置 Krita --> "
"Python 插件管理器` ，在对话框中勾选“脚本工具”。如果连那里也看不到该插件，请确"
"保你使用的是最新正式版的 Krita。"

#: ../../user_manual/python_scripting/introduction_to_python_scripting.rst:41
msgid ""
"The scripter will pop up with a text editor window on top and an output "
"window below. Input the following in the text area:"
msgstr ""
"脚本工具对话框的上半部分是一个文本编辑器，下半部分是一个输出信息的显示框。在"
"文本编辑器中输入下面的代码："

#: ../../user_manual/python_scripting/introduction_to_python_scripting.rst:47
msgid "print(\"hello world\")"
msgstr ""

#: ../../user_manual/python_scripting/introduction_to_python_scripting.rst:48
msgid ""
"Press the big play button or press :kbd:`Ctrl + R` to run the script. Then, "
"below, in the output area the following should show up::"
msgstr ""
"要执行脚本，可以点击对话框左上角的“播放”按钮，也可以按 :kbd:`Ctrl + R` 快捷"
"键。现在输出框中应该会显示："

#: ../../user_manual/python_scripting/introduction_to_python_scripting.rst:50
msgid ""
"==== Warning: Script not saved! ====\n"
"hello world"
msgstr ""

#: ../../user_manual/python_scripting/introduction_to_python_scripting.rst:53
msgid ""
"Now we have a console that can run functions like print() from the Python "
"environment - but how do we use it to manage Krita?"
msgstr ""
"现在我们知道这个控制台可以执行 Python 环境中的 print() 这样的功能了，那么我们"
"应该如何使用它来对 Krita 进行操作呢？"

#: ../../user_manual/python_scripting/introduction_to_python_scripting.rst:56
msgid "Running basic Krita commands"
msgstr "执行 Krita 的基本命令"

#: ../../user_manual/python_scripting/introduction_to_python_scripting.rst:58
msgid ""
"To allow Python to communicate with Krita, we will use the Krita module. At "
"the top of every script, we will write: ``from krita import *``"
msgstr ""
"要让 Python 和 Krita 建立联系，我们需要使用 Krita 模块。在脚本的起始处插入： "
"``from krita import *``"

#: ../../user_manual/python_scripting/introduction_to_python_scripting.rst:60
msgid ""
"This allows us to talk to Krita through ``Krita.instance()``. Let's try to "
"double our coding abilities with Python."
msgstr ""
"这行代码让我们可以通过 ``Krita.instance()`` 接口与 Krita 建立联系。现在我们可"
"以用 Python 执行 Krita 的操作了。"

#: ../../user_manual/python_scripting/introduction_to_python_scripting.rst:67
msgid ""
"from krita import *\n"
"\n"
"Krita.instance().action('python_scripter').trigger()"
msgstr ""

#: ../../user_manual/python_scripting/introduction_to_python_scripting.rst:68
msgid ""
"You should see a second scripter window open. Pretty neat! Here is a "
"slightly more advanced example."
msgstr ""
"上述代码执行后会打开另一个脚本工具窗口。是不是很有意思？接下来让我们尝试一组"
"更加复杂的代码。"

#: ../../user_manual/python_scripting/introduction_to_python_scripting.rst:76
msgid ""
"from krita import *\n"
"\n"
"d = Krita.instance().createDocument(512, 512, \"Python test document\", "
"\"RGBA\", \"U8\", \"\", 120.0)\n"
"Krita.instance().activeWindow().addView(d)"
msgstr ""

#: ../../user_manual/python_scripting/introduction_to_python_scripting.rst:77
msgid ""
"This will open up a new document. Clearly Python gives you quite a lot of "
"control to automate Krita. Over time we expect the community to write all "
"kinds of scripts that you can use simply by pasting them in the scripter."
msgstr ""
"这段代码会新建一个具有指定参数的文档。不难想象，使用 Python 脚本可以控制 "
"Krita 进行许多自动化操作。假以时日，我们相信 Krita 社区会写出各种各样的脚本，"
"到时候你只需要把代码复制到脚本工具里面执行即可。"

#: ../../user_manual/python_scripting/introduction_to_python_scripting.rst:79
msgid ""
"But what if you want to write new commands for yourself? The best place to "
"start is very simple: search for examples written by other people! You can "
"save a lot of time if someone else has written code that you can base your "
"work on. It's also worth looking through the python plugins, which are "
"located in /share/krita/pykrita. There's also a step by step guide for :ref:"
"`krita_python_plugin_howto` here in the manual."
msgstr ""
"可要是你想自己编写一些新命令，该怎么学习呢？最好的办法当然是：看看别人是怎么"
"写的！使用别人的已有代码作为基础可以节省许多时间。你可以参考 /share/krita/"
"pykrita 目录里预装的 Python 插件。我们还在用户手册里准备了 :ref:"
"`krita_python_plugin_howto` 。"

#: ../../user_manual/python_scripting/introduction_to_python_scripting.rst:81
msgid ""
"But it's likely that you need more information. For that, we will need see "
"what's hidden behind the asterisk when you ``import * from Krita``. To learn "
"what Krita functions that are available and how to use them, you will want "
"to go for Krita API reference documentation."
msgstr ""
"不过仅凭这些还远远不够。要发现 ``import * from Krita`` 的星号位置还可以填入什"
"么其他的 Krita 功能，学习它们的用法，可以阅读 Krita API 参考文档。"

#: ../../user_manual/python_scripting/introduction_to_python_scripting.rst:84
msgid "Krita's API"
msgstr "Krita 的 API"

#: ../../user_manual/python_scripting/introduction_to_python_scripting.rst:86
msgid ""
"`LibKis API Overview <https://api.kde.org/extragear-api/graphics-apidocs/"
"krita/libs/libkis/html/index.html>`_"
msgstr ""
"`LibKis API 概览 <https://api.kde.org/extragear-api/graphics-apidocs/krita/"
"libs/libkis/html/index.html>`_"

#: ../../user_manual/python_scripting/introduction_to_python_scripting.rst:87
msgid ""
"`Krita class documentation <https://api.kde.org/extragear-api/graphics-"
"apidocs/krita/libs/libkis/html/classKrita.html>`_"
msgstr ""
"`Krita 程序类文档 <https://api.kde.org/extragear-api/graphics-apidocs/krita/"
"libs/libkis/html/classKrita.html>`_"

#: ../../user_manual/python_scripting/introduction_to_python_scripting.rst:89
msgid ""
"Those pages may look like a lot of jargon at first. This is because Krita's "
"API documentation comes from the underlying C++ language that Krita is "
"written in. The magic happens because of a Python tool called SIP, which "
"makes it possible for python speak in C++ and talk to Krita. The end result "
"is that when we ``import krita`` and call functions, we're actually using "
"the C++ methods listed in that documentation."
msgstr ""
"这两个页面可能看起来非常艰深。这很难避免，毕竟 Krita 是通过 C++ 编程语言编写"
"的。Python 脚本在与 Krita 建立联系时会通过 SIP 使用 C++，这样当我们使用 "
"``import krita`` 来调用功能时，我们实际上调用的是这些文档里列举的 C++ 功能。"

#: ../../user_manual/python_scripting/introduction_to_python_scripting.rst:91
msgid ""
"Let's see how this stuff works in more detail. Let's take a look at the "
"second link, the `Krita class reference <https://api.kde.org/extragear-api/"
"graphics-apidocs/krita/libs/libkis/html/classKrita."
"html#aa55507903d088013ced2df8c74f28a63>`_. There we can see all the "
"functions available to the Krita instance. If you type dir(Krita.instance()) "
"in Python, it should match this page very closely - you can view the "
"documentation of the functions createDocument(), activeWindow(), and "
"action() which we used above."
msgstr ""
"让我们仔细观察一下这些功能是如何工作的。在 `Krita 程序类参考文档 <https://"
"api.kde.org/extragear-api/graphics-apidocs/krita/libs/libkis/html/classKrita."
"html#aa55507903d088013ced2df8c74f28a63>`_ 页面列出了 Krita 进程的所有可用功"
"能。如果你在 Python 里输入 dir(Krita.instance()) ，它返回的结果应该和该页非常"
"相近。你可以研究一下前面例子使用过的功能： createDocument() 、"
"activeWindow() 、action() 。"

#: ../../user_manual/python_scripting/introduction_to_python_scripting.rst:93
msgid ""
"One of the more confusing things is seeing all the C++ classes that Krita "
"uses, including the Qt classes that start with Q. But here is the beauty of "
"SIP: it tries to make the translation from these classes into Python as "
"simple and straightforward as possible. For example, you can see that the "
"function filters() returns a QStringList. However, SIP converts those "
"QStringLists into regular python list of strings!"
msgstr ""
"看到 Krita 的各种 C++ 程序类和 Q 开头的 Qt 程序类混列在一起会让人觉得眼花缭"
"乱。不过这正是 SIP 大展身手的地方：它会尽可能把这些程序类翻译为简单易懂的 "
"Python 格式。例如你可以看到 function filters() 返回一个 QStringList ，而 SIP "
"会把那些 QStringList 转换成正常的 Python 字符串。"

#: ../../user_manual/python_scripting/introduction_to_python_scripting.rst:100
msgid ""
"from krita import *\n"
"\n"
"print(Krita.instance().filters())"
msgstr ""

#: ../../user_manual/python_scripting/introduction_to_python_scripting.rst:101
msgid "Outputs as: ::"
msgstr "输出为: ::"

#: ../../user_manual/python_scripting/introduction_to_python_scripting.rst:103
msgid ""
"['asc-cdl', 'autocontrast', 'blur', 'burn', 'colorbalance', 'colortoalpha', "
"'colortransfer',\n"
"'desaturate', 'dodge', 'edge detection', 'emboss', 'emboss all directions', "
"'emboss horizontal and vertical',\n"
"'emboss horizontal only', 'emboss laplascian', 'emboss vertical only', "
"'gaussian blur', 'gaussiannoisereducer',\n"
"'gradientmap', 'halftone', 'height to normal', 'hsvadjustment', "
"'indexcolors', 'invert', 'lens blur', 'levels',\n"
"'maximize', 'mean removal', 'minimize', 'motion blur', 'noise', 'normalize', "
"'oilpaint', 'perchannel', 'phongbumpmap',\n"
"'pixelize', 'posterize', 'raindrops', 'randompick', 'roundcorners', "
"'sharpen', 'smalltiles', 'threshold', 'unsharp',\n"
"'wave', 'waveletnoisereducer']"
msgstr ""

#: ../../user_manual/python_scripting/introduction_to_python_scripting.rst:112
msgid "However, sometimes the conversion doesn't go quite as smoothly."
msgstr "不过有时候这种转换也会遇到一些问题。例如："

#: ../../user_manual/python_scripting/introduction_to_python_scripting.rst:119
msgid ""
"from krita import *\n"
"\n"
"print(Krita.instance().documents())"
msgstr ""

#: ../../user_manual/python_scripting/introduction_to_python_scripting.rst:120
msgid "gives something like this::"
msgstr "返回的是::"

#: ../../user_manual/python_scripting/introduction_to_python_scripting.rst:123
msgid ""
"[<PyKrita.krita.Document object at 0x7f7294630b88>,\n"
"<PyKrita.krita.Document object at 0x7f72946309d8>,\n"
"<PyKrita.krita.Document object at 0x7f7294630c18>]"
msgstr ""

#: ../../user_manual/python_scripting/introduction_to_python_scripting.rst:127
msgid ""
"It is a list of something, sure, but how to use it? If we go back to the "
"Krita apidocs page and look at the function, documents() we'll see there's "
"actually a clickable link on the 'Document' class. `If you follow that link "
"<https://api.kde.org/extragear-api/graphics-apidocs/krita/libs/libkis/html/"
"classDocument.html>`_, you'll see that the document has a function called "
"name() which returns the name of the document, and functions width() and "
"height() which return the dimensions. So if we wanted to generate an info "
"report about the documents in Krita, we could write a script like this:"
msgstr ""
"它列出了一坨不知道是什么玩意，这下怎么办？我们可以回头参考一下 Krita API 文档"
"页面，看看 documents() 是怎么回事。你会看到在“Document”程序类那里其实是一个链"
"接， `点进去该页面 <https://api.kde.org/extragear-api/graphics-apidocs/krita/"
"libs/libkis/html/classDocument.html>`_ 你便会发现 document 类下面有个叫做 "
"name() 的功能用来返回文档名称，width() 和 height() 则会返回文档尺寸。如果我们"
"想要生成 Krita 已打开文件的信息报表，我们可以编写下面的脚本："

#: ../../user_manual/python_scripting/introduction_to_python_scripting.rst:136
msgid ""
"from krita import *\n"
"\n"
"for doc in Krita.instance().documents():\n"
"    print(doc.name())\n"
"    print(\" \"+str(doc.width())+\"x\"+str(doc.height()))"
msgstr ""

#: ../../user_manual/python_scripting/introduction_to_python_scripting.rst:137
msgid "We get an output like::"
msgstr "输出结果为 ::"

#: ../../user_manual/python_scripting/introduction_to_python_scripting.rst:139
msgid ""
"==== Warning: Script not saved! ====\n"
"Unnamed\n"
" 2480x3508\n"
"sketch21\n"
" 3508x2480\n"
"Blue morning\n"
" 1600x900"
msgstr ""

#: ../../user_manual/python_scripting/introduction_to_python_scripting.rst:147
msgid ""
"Hopefully this will give you an idea of how to navigate the API docs now."
msgstr "希望通过上面的介绍，你已经学会了如何检索和使用 Krita API 文档的内容。"

#: ../../user_manual/python_scripting/introduction_to_python_scripting.rst:149
msgid ""
"Krita's API has many more classes, you can get to them by going to the top-"
"left class list, or just clicking their names to get to their API docs. The "
"functions print() or dir() are your friends here as well. This line will "
"print out a list of all the actions in Krita - you could swap in one of "
"these commands instead of 'python_scripter' in the example above."
msgstr ""
"Krita 的 API 有许多程序类。你可以在文档页面的左上列表找到它们，也可以点击名称"
"来查看各个功能的 API 文档。print() 和 dir() 功能可以用来列出 Krita 的全部操"
"作，你只需要把前面例子中的“python_scripter”换成 API 文档中的所需名称即可。"

#: ../../user_manual/python_scripting/introduction_to_python_scripting.rst:154
msgid "[print([a.objectName(), a.text()]) for a in Krita.instance().actions()]"
msgstr ""

#: ../../user_manual/python_scripting/introduction_to_python_scripting.rst:155
msgid ""
"The Python module ``inspect`` was designed for this sort of task. Here's a "
"useful function to print info about a class to the console."
msgstr ""
"Python 的 ``inspect`` 模块可以用来获得程序类信息。下面的例子展示了如何在控制"
"台里输出一个程序类的信息。"

#: ../../user_manual/python_scripting/introduction_to_python_scripting.rst:166
msgid ""
"import inspect\n"
"def getInfo(target):\n"
"    [print(item) for item in inspect.getmembers(target) if not item[0]."
"startswith('_')]\n"
"\n"
"getInfo(Krita.instance())"
msgstr ""

#: ../../user_manual/python_scripting/introduction_to_python_scripting.rst:167
msgid ""
"Finally, in addition to the LibKis documentation, the Qt documentation, "
"since Krita uses PyQt to expose nearly all of the Qt API to Python. You can "
"build entire windows with buttons and forms this way, using the very same "
"tools that Krita is using! You can read the `Qt documentation <https://doc."
"qt.io/>`_ and the `PyQt documentation <https://www.riverbankcomputing.com/"
"static/Docs/PyQt5/>`_ for more info about this, and also definitely study "
"the included plugins as well to see how they work."
msgstr ""
"最后，除了 LibKis 文档之外，你可能还要阅读 Qt 文档，因为 Krita 通过 PyQt 把 "
"Qt API 的绝大多数功能与 Python 进行了对接。这意味着你可以使用 Krita 本身也在"
"使用的 Qt 功能来构建一套带有按钮和输入框的窗口！你可以查阅 `Qt 文档 <https://"
"doc.qt.io/>`_ 和 `PyQt 文档 <https://www.riverbankcomputing.com/static/Docs/"
"PyQt5/>`_ 来学习相关用法，同时别忘了可以参考 Krita 自带的插件的代码设计。"

#: ../../user_manual/python_scripting/introduction_to_python_scripting.rst:171
msgid "Technical Details"
msgstr "技术细节"

#: ../../user_manual/python_scripting/introduction_to_python_scripting.rst:177
msgid "Python Scripting on Windows"
msgstr "在 Windows 环境进行 Python 编程"

#: ../../user_manual/python_scripting/introduction_to_python_scripting.rst:179
msgid ""
"To get Python scripting working on Windows 7/8/8.1, you will need to install "
"the `Universal C Runtime from Microsoft's website <https://www.microsoft.com/"
"en-us/download/details.aspx?id=48234>`_. (Windows 10 already comes with it.)"
msgstr ""
"要在 Windows 7/8/8.1 下面正常运行 Python 环境，请从微软的网站下载并安装 `通"
"用 C 运行时 <https://www.microsoft.com/en-us/download/details.aspx?"
"id=48234>`_ 。(Windows 10 已经预装)"

#: ../../user_manual/python_scripting/introduction_to_python_scripting.rst:182
msgid "Python 2 and 3"
msgstr "Python 2 和 3"

#: ../../user_manual/python_scripting/introduction_to_python_scripting.rst:184
msgid "By default Krita is compiled for python 3."
msgstr "Krita 默认为 Python 3 进行编译。"

#: ../../user_manual/python_scripting/introduction_to_python_scripting.rst:186
msgid ""
"However, it is possible to compile it with python 2. To do so, you will need "
"to add the following to the cmake configuration line::"
msgstr "要为 Python 2 进行编译，把下面的参数添加到 Krita 的 cmake 配置::"
