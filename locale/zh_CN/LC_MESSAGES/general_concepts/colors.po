msgid ""
msgstr ""
"Project-Id-Version: kdeorg\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-04 03:33+0200\n"
"PO-Revision-Date: 2019-05-05 22:26\n"
"Last-Translator: Guo Yunhe (guoyunhe)\n"
"Language-Team: Chinese Simplified\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: crowdin.com\n"
"X-Crowdin-Project: kdeorg\n"
"X-Crowdin-Language: zh-CN\n"
"X-Crowdin-File: /kf5-trunk/messages/www/"
"docs_krita_org_general_concepts___colors.pot\n"

#: ../../general_concepts/colors.rst:None
msgid ".. image:: images/color_category/Krita_color_mixing_natural_order.png"
msgstr ""

#: ../../general_concepts/colors.rst:None
msgid ""
".. image:: images/color_category/Krita_color_mixing_traditional_order.png"
msgstr ""

#: ../../general_concepts/colors.rst:None
msgid ".. image:: images/color_category/Rgbcolorcube_2.png"
msgstr ""

#: ../../general_concepts/colors.rst:None
msgid ".. image:: images/color_category/Rgbcolorcube_HSI.png"
msgstr ""

#: ../../general_concepts/colors.rst:1
msgid "The Colors Category."
msgstr "色彩分类。"

#: ../../general_concepts/colors.rst:16
msgid "Colors"
msgstr "色彩"

#: ../../general_concepts/colors.rst:18
msgid "Okay, so... Let's talk **colors**!"
msgstr "好了，现在就让我们来谈论一下 **色彩** 吧！"

#: ../../general_concepts/colors.rst:20
msgid ""
"Colors are pretty, and they're also *pretty* fundamental to painting. When "
"painting, we want to be able to access and manipulate colors easily to do "
"fun stuff like :ref:`mixing <mixing_colors>` them together or matching them "
"to create visual **harmony** or **contrast**. We also want to be able to "
"quickly find our favorite shades of red or favorite tints of blue without "
"thinking or working too hard. All of this becomes even more important the "
"more colors we have access to!"
msgstr ""
"色彩不但看上去赏心悦目，它们对于绘画来说也至关重要。我们需要在画画时快速调用"
"和改变颜色，对不同的颜色进行 :ref:`混合 <mixing_colors>` 或者匹配等有趣的处"
"理，以实现视觉上的 **和谐** 与 **对比** 。我们都想快速确定合适的色调而无需绞"
"尽脑汁去思考。我们使用的颜色越多，色彩学的知识就显得越重要。"

#: ../../general_concepts/colors.rst:22
msgid ""
"Naturally, the first thing we do is organize the colors, usually based on "
"what we see in nature. For example, we tend to order hues in the order that "
"they appear in a rainbow, and we think about brightness of values as a tonal "
"range from white to black. Of course, nature itself is tied to physics, and "
"the order of hues and the concept of brightness has everything to do with "
"the wavelength and energy of light as it bounces around and eventually "
"enters our eyes."
msgstr ""
"我们首先介绍一下颜色的组织和排列原则。对自然现象的观察经验是排列颜色的重要依"
"据。我们习惯按照在彩虹中的先后顺序排列色相，按照由白到黑的方式排列亮度。自然"
"现象本身又是物理原理的反映。色彩本质上是环境光进入肉眼后的视觉感知，色相的先"
"后顺序与光的波长有关，而亮度又与光的能量强弱有关。"

#: ../../general_concepts/colors.rst:28
msgid ""
"In the case of *traditional media*, we order the colors (**hues**) by how "
"they result from mixes of other colors, starting with the *subtractive* "
"**primary colors**: cyan, magenta, yellow. Mixing each primary color with "
"each other reveals three secondary colors: violet, orange, and green. Mixing "
"between those colors creates tertiary colors, and so on - the variations of "
"hues between each named color are practically limitless! Thinking of colors "
"in this way creates a circle of hues that artists call *\"the color wheel"
"\"*! Each one of these hues can be made **lighter (tint)** or **darker "
"(shade)** by mixing with white or black, respectively, and any color can be "
"made **less saturated** (more gray or muted) by mixing with another color on "
"the opposite side of the color wheel."
msgstr ""
"对于传统颜料而言，我们按照颜色的混合结果来排列色相。颜料的三种 **原色** 分别"
"为：青、品红、黄。把任意两种原色混合后可以得到三种 **间色** (二次色)：紫、"
"橙、绿。将间色与其他颜色混合后可以得到各种 **复色** (三次色)。两种颜色之间的"
"色相变化可以被无限地细分下去，而把全部颜色按照色相的相邻关系连接起来便形成了"
"所谓的 **色相环** 。颜色与白混合后会被 **减淡** (提高亮度)，与黑混合后会被 **"
"加深** (降低亮度)，与色相环上位置相反的另一种颜色混合后 **饱和度** 会降低。"

#: ../../general_concepts/colors.rst:34
msgid ""
"In the digital world of computers color is treated similarly, and we order "
"colors by the *way the screen generates them*; each **pixel** of color on "
"our screen is produced by combining *super tiny* red, green, and blue lights "
"of varying intensities. Unlike mixing paint, where light intensity is "
"subtracted by pigment and mixing all the colors together produces a muddy "
"brown or gray, *mixing lights is additive* - no light at all is obviously "
"black, and mixing all of the colored lights produces white. As such, we can "
"make a list of possible primary color **intensities**:"
msgstr ""
"传统颜料依靠反射光线来呈现色彩，不同颜色在混合后亮度会 **相减** ，所以它的颜"
"色混合原则叫做 **减色法**。各种颜料混合后会得到浑浊的褐或灰。与之相反，计算机"
"屏幕是一个发光体，每个像素通过组合不同亮度的微型红、绿、蓝发光体来呈现色彩。"
"色光混合时亮度会 **相加** ，完全无光时为黑，全部色光混合后则为白，因此它的颜"
"色混合原则叫做 **加色法** 。现在让我们使用加色法，把一种原色的几种可能的 **亮"
"度** 做成一个表格："

#: ../../general_concepts/colors.rst:37
msgid ".. image:: images/color_category/percentages_red.svg"
msgstr ""

#: ../../general_concepts/colors.rst:38
msgid ""
"Shown above is a table of different intensities of red light. Our screens "
"can certainly create a lot of shades of red, but we only start to see *the "
"power of pixels* when we add in the other primary colors, green and blue, "
"and show the colors of light that are produced when they are added together! "
"For example, here's a table showing various mixes of red and green:"
msgstr ""
"上表列出了 5 种不同亮度的红色光。你或许会觉得这没什么稀奇的，毕竟电脑屏幕可以"
"显示的红色种类远不止这几种。先别急，让我们引入绿、蓝这两种原色和红色混合，事"
"情就开始变得有趣起来了。首先，让我们通过下表看看 5 种红和 5 种绿能混合出什么"
"样的结果："

#: ../../general_concepts/colors.rst:41
msgid ".. image:: images/color_category/percentages_red_green.svg"
msgstr ""

#: ../../general_concepts/colors.rst:42
msgid ""
"But that's just red and green, what about blue? I guess we can make *even "
"more tables* to show what happens when different amounts of blue are added "
"into the mix:"
msgstr ""
"如果把蓝色也加进来会怎么样呢？下面的四个表格分别呈现了在上面的红绿混色表中加"
"进了 25%、50%、75%、100% 蓝之后颜色的变化。"

#: ../../general_concepts/colors.rst:45
msgid ".. image:: images/color_category/percentages_red_green_blue.svg"
msgstr ""

#: ../../general_concepts/colors.rst:46
msgid ""
"This way of ordering colors is probably familiar to you if you have used "
"some programs for making internet applications, like Flash. In fact, if we "
"had made 6 samples instead of 5 per \"channel\" (that is, per each primary "
"color), we'd have gotten the `216 websafe colors <https://websafecolors.info/"
"color-chart>`_!"
msgstr ""
"如果你以前用过像 Flash 这样的程序来制作互联网应用，你或许会对这种颜色组织方式"
"感到似曾相识。在这个例子中每个色彩通道的样品数为 5，如果把样品数提高到 6，我"
"们就会得到熟悉的 `216 网络安全颜色 <https://websafecolors.info/color-"
"chart>`_ 了！"

#: ../../general_concepts/colors.rst:48
msgid ""
"Showing the colors in a bunch of tables just *feels wrong*, though, doesn't "
"it? That's because, while our tables are *2D*, as we are mixing *three* "
"primary colors, color can be thought of as *3D*! It’s a bit odd the first "
"time you think about it this way, but you can actually stack these tables "
"based on the amount of blue and they become a **cube**!"
msgstr ""
"不过你或许已经发现：通过表格来表现色彩特别费劲。这是因为我们的表格是 **二维"
"** 的，需要混合的原色却有 **三种** 。要有效地表现 **三个** 颜色分量，我们需要"
"使用 **三维** 的手段。这话听起来有点玄乎，但如果我们把上面这些表格按照蓝的比"
"例由上至下垂直叠放成一堆，它们就组成了一个 **三维** 的 **立方体** ！"

#: ../../general_concepts/colors.rst:54
msgid ""
"This cube is not filled with water, or sand, or even *concrete*, but colors! "
"Colors are pretty *abstract*, and we typically talk about cubes and other 3D "
"objects that represent abstract ideas as **spaces**, hence we call this cube "
"a **color space**. Because this particular cube uses red, green, and blue as "
"its axes, we say that our cube is in the RGB :ref:`RGB color model "
"<model_rgb>`."
msgstr ""
"任何三维的物体都会占据一定的空间。正如我们把房间内部的空间叫做“生活空间”，我"
"们也可以把这个填充了色彩的立方体所占的空间叫做 **色彩空间** 。由于这个立方体"
"的三条轴线代表了红 (R)、绿 (G)、蓝 (B) 三种颜色分量的多少，我们便说它是一个 :"
"ref:`RGB 色彩模型 <model_rgb>` 的色彩空间。"

#: ../../general_concepts/colors.rst:56
msgid ""
"There are many more color models. For example, if we were to balance our "
"cube on the black corner, the white corner would be right under our finger "
"at the very top of the cube. And as geometry and maths would have it, if we "
"were to cut the cube in half as we balanced it, the line from the white "
"point at the top to the black point at the bottom would be the **grayscale**."
msgstr ""
"色彩模型有许多种类，现在让我们介绍其中一种叫做 HSI 的模型。请看下图，如果我们"
"把色彩立方体纯黑的一角顶在地面，让它的红绿蓝三条边相对平衡地立起，那么纯白的"
"一角就会在顶上的位置 (图中食指处)。沿着黑白两个角的连线切开这个立方体，连接顶"
"上白点和底下黑点的那根线便是 **灰度** 直线。"

#: ../../general_concepts/colors.rst:62
msgid ""
"When you think about a strip of grays running through the middle of the "
"cube, as we move farther away from that grayscale towards the *outer edges* "
"of the cube the colors would begin to become more saturated (colorful and "
"vivid). The circle of colors around that middle axis of gray would then "
"define the hue, with a different color in each direction."
msgstr ""
"请想象在立方体的中心有一串连贯的灰连接着立方体的白点和黑点。当我们从灰度直线"
"上的任意一点向除了白点与黑点之外的立方体的 **表面** 移动时，颜色会变得越来越 "
"**饱和** (鲜艳)。以灰度直线上的任意一点为圆心画一个圆，这个圆就定义了这个灰度"
"的色相，圆的每个方向代表一种颜色。"

#: ../../general_concepts/colors.rst:64
msgid ""
"This is the basic idea of the :ref:`HSV, HSL, HSI, and HSY color models "
"<model_rgb>`. This particular model is called **HSI** (hue, saturation, and "
"intensity), because it maps each unique color to the intensity of the "
"primary colored lights that mix to create them."
msgstr ""
"这便是 :ref:`HSV、HSL、HSI 和 HSY 色彩模型 <model_rgb>` 的基本概念。例子中展"
"现的是 **HSI 模型** (Hue-色相、Saturation-饱和度、Intensity-强度)，它按照三种"
"原色色光的强度来排列颜色。"

#: ../../general_concepts/colors.rst:66
msgid ""
"There are other color models, like :ref:`model_lab`, where we look at the "
"corresponding gray value of a color first, and then try to describe it, not "
"it terms of hue and saturation, but by how red, green, blue, and yellow it "
"is. Because our brains cannot really comprehend a color that is both green "
"and red, or yellow and blue, this makes them good *polar opposites* in a "
"sliding scale. We call this a **perceptual model**, as it is based on how "
"*we see color instead of how the color is generated*."
msgstr ""
"除此之外还有别的色彩模型，如 :ref:`model_lab` 模型。在这个模型中我们首先确定"
"一种颜色的灰度值，然后在这个基础上进一步描述这种颜色的特点。前面的 HSX 类模型"
"通过色相和饱和度来描述颜色，而 Lab 模型则是通过红、绿、蓝、黄的纯度来描述颜"
"色。对人类的大脑而言，红和绿、蓝和黄是两组相反的颜色。纯红里面一定不会含有任"
"何绿，反之亦然。这个特性让它们非常适合被用作颜色滑动条的两个端点。由于此模型"
"的原理基于人类的色彩感知特点而非色彩本身的产生机理，我们将其称作 **可感知模型"
"** 。"

#: ../../general_concepts/colors.rst:68
msgid ""
"Color models describe color spaces, which, in turn, are all sorts of sizes "
"and shapes as well. Krita allows you to do operations in different models "
"and spaces, and we call this functionality **\"Color Management\"**."
msgstr ""
"我们可以使用不同的色彩模型来描述色彩空间，而色彩空间本身又有不同的体积和形"
"状。Krita 可以让你在不同的色彩模型和空间中进行作业，我们把这项功能称作 **色彩"
"管理** 。"

#: ../../general_concepts/colors.rst:70
msgid ""
"Color Management is necessary for :ref:`**CMYK** (subtractive) <model_cmyk>` "
"support, but outside of that, not many drawing or painting programs offer "
"the feature, as *some* developers believe that artists have no need for such "
"functionality. *What a pity!* Especially because Color Management allows for "
"far more *cool tricks* than just basic CMYK support, and the ability to "
"*manipulate colors like a computer can* is perhaps digital painting’s most "
"unique quality!"
msgstr ""
"色彩管理是实现 :ref:`CMYK (减色法) <model_cmyk>` 支持所必须的功能。其实除了基"
"本 CMYK 支持之外，色彩管理还有许多巧妙的用途。数字绘画的一大魅力就是使用通过"
"计算机才能实现的方式去控制色彩，遗憾的是不少开发人员认为画手用不着那些功能，"
"导致许多软件都在色彩管理方面有所欠缺。"

#: ../../general_concepts/colors.rst:72
msgid ""
"As Krita is giving almost *unprecedented control of color*, this "
"unfortunately means that there are little to no articles out there on how to "
"use color management for artists or painters. And so, we made this category "
"and hope to fill it up with relatively short articles explaining color-"
"related concepts in a light-hearted and visual manner."
msgstr ""
"Krita 具备完整的色彩管理功能，画手们可以通过它对色彩进行前所未有的掌控。然而"
"网络上面向一般画手的色彩管理教程少之又少。为了填补空白，我们在本分类准备了一"
"系列简明易懂，图文并茂的文章来对色彩管理的相关概念进行说明。"

#: ../../general_concepts/colors.rst:74
msgid ""
"We recommend going over the :ref:`color managed workflow page "
"<color_managed_workflow>` next - even if you don't plan on using it, it will "
"help make sense out of the many features related to colors and Color "
"Management. Other than that, each article should stand on its own and can be "
"taken in at your own direction and pace!"
msgstr ""
"我们建议你至少通读下一章的 :ref:`色彩管理流程 <color_managed_workflow>` 页"
"面。因为即使你不打算使用色彩管理功能，了解相关流程也会帮助你理解 Krita 的许多"
"与颜色、色彩管理相关的功能。其他页面则可以按需选读。"

#: ../../general_concepts/colors.rst:76
msgid "Topics:"
msgstr "目录："
