# translation of docs_krita_org_general_concepts___colors___scene_linear_painting.po to Slovak
# Roman Paholik <wizzardsk@gmail.com>, 2019.
msgid ""
msgstr ""
"Project-Id-Version: "
"docs_krita_org_general_concepts___colors___scene_linear_painting\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-04-16 03:38+0200\n"
"PO-Revision-Date: 2019-03-01 13:16+0100\n"
"Last-Translator: Roman Paholik <wizzardsk@gmail.com>\n"
"Language-Team: Slovak <kde-sk@linux.sk>\n"
"Language: sk\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Lokalize 2.0\n"
"Plural-Forms: nplurals=3; plural=(n==1) ? 0 : (n>=2 && n<=4) ? 1 : 2;\n"

#: ../../general_concepts/colors/scene_linear_painting.rst:1
msgid "Scene Linear painting in Krita"
msgstr ""

#: ../../general_concepts/colors/scene_linear_painting.rst:15
msgid "Scene Linear Painting"
msgstr ""

#: ../../general_concepts/colors/scene_linear_painting.rst:17
msgid ""
"Previously referred to as HDR painting and Scene Referred painting, Scene "
"Linear Painting is doing digital painting in a peculiar type of colorspace. "
"It is painting in a color space that is..."
msgstr ""

#: ../../general_concepts/colors/scene_linear_painting.rst:19
msgid ""
"Linear - there’s no gamma encoding, or tone-mapping or whatever going on "
"with the pixels you manipulate. (This is different from the pixels you see, "
"but we’ll get to that later)"
msgstr ""

#: ../../general_concepts/colors/scene_linear_painting.rst:20
msgid "Floating Point - So 16bit or 32bit floating point per channel."
msgstr ""

#: ../../general_concepts/colors/scene_linear_painting.rst:22
msgid ""
"These are the two important characteristics. The colorspace has a few more "
"properties than this, such as the white point, or more importantly, the "
"colorants that make up the gamut. But here’s the thing, those two could be "
"anything, as long as the space is linear and the color depth is floating "
"point."
msgstr ""

#: ../../general_concepts/colors/scene_linear_painting.rst:24
msgid ""
"So, *Scene Linear is not a single one colorspace, but a* **TYPE** *of "
"colorspace*. You can have a scene linear space that uses the sRGB/rec 709 "
"colorants, or one that uses adobeRGB, or maybe one that uses rec 2020, as "
"long as it is *linear* and in a *floating point bit depth*."
msgstr ""

#: ../../general_concepts/colors/scene_linear_painting.rst:26
msgid ""
"These two factors are for one reason: To make black and white arbitrary "
"values. This might seem a bit weird. But when you are dealing with light-"
"sources, you are dealing with a massive range of contrasts, and will have to "
"decide afterwards which white and black you’d like to have. This is what the "
"scene means in scene-linear, the relevant values are unique per scene, like "
"a real world scene: a flower field lit by moonlight, a city in twilight or a "
"sunny beach. You want to be able to put the right emphasis on the most "
"important contrasting values, and being able to choose what is white and "
"what is black is a very powerful tool here. After all, humans in the real "
"world can see much more when they get used to the dark, or to the sun, so "
"why not apply that to how we make our images?"
msgstr ""

#: ../../general_concepts/colors/scene_linear_painting.rst:28
msgid ""
"This is also why it needs to be Linear. Gamma and Tone-mapped color spaces "
"are already choosing which contrast is the most important to you. But for "
"that, they too need to choose what is white or black. Linear doesn’t make "
"such assumptions, so much better for when you want to choose yourself. You "
"will eventually want to stick your image through some tone-mapping or gamma "
"correction, but only at the end after you have applied filters and mixed "
"colors!"
msgstr ""

#: ../../general_concepts/colors/scene_linear_painting.rst:30
msgid ""
"In fact, there’s always a non-destructive sort of transform going on while "
"you are working on your image which includes the tone-mapping. This is "
"called a display or view transform, and they provide a sort of set of "
"binoculars into the world of your image. Without it, your computer cannot "
"show these colors properly; it doesn’t know how to interpret it properly, "
"often making the image too dark. Providing such a transform and allowing you "
"to configure it is the prime function of color management."
msgstr ""

#: ../../general_concepts/colors/scene_linear_painting.rst:32
msgid ""
"Between different view and display transforms, there’s also a difference in "
"types. Some are really naive, others are more sophisticated, and some need "
"to be used in a certain manner to work properly. The ICC color management "
"can only give a certain type of view transforms, while OCIO color management "
"in the LUT docker can give much more complex transforms easily configurable "
"and custom settings that can be shared between programs."
msgstr ""

#: ../../general_concepts/colors/scene_linear_painting.rst:38
msgid ".. image:: images/en/color_category/Krita_scenelinear_cat_01.png"
msgstr ""

#: ../../general_concepts/colors/scene_linear_painting.rst:38
msgid ""
"Above, an example of the more naive transform provided by going from scene-"
"linear sRGB to regular sRGB, and to the right a more sophisticated transform "
"coming from the filmic blender OCIO configuration. Look at the difference "
"between the paws. Image by Wolthera van Hövell tot Westerflier, License: CC-"
"BY-SA"
msgstr ""

#: ../../general_concepts/colors/scene_linear_painting.rst:40
msgid ""
"Conversely, transforming and interpreting your image’s colors is the only "
"thing OCIO can do, and it can do it with really complex transforms, really "
"fast. It doesn’t understand what your image’s color space is originally, "
"doesn’t understand what CMYK is, and there’s also no such thing as a OCIO "
"color profile. Therefore you will need to switch to an ICC workflow if you "
"wish to prepare for print."
msgstr ""

#: ../../general_concepts/colors/scene_linear_painting.rst:43
msgid "Yes, but what is the point?"
msgstr ""

#: ../../general_concepts/colors/scene_linear_painting.rst:45
msgid "The point is making things easier in the long run:"
msgstr ""

#: ../../general_concepts/colors/scene_linear_painting.rst:47
msgid "It is easier to keep saturated non-muddy colors in a linear space."
msgstr ""

#: ../../general_concepts/colors/scene_linear_painting.rst:48
msgid "The high bit depth makes it easier to get smoother color mixes."
msgstr ""

#: ../../general_concepts/colors/scene_linear_painting.rst:49
msgid ""
"Filters are more powerful and give nicer results in this space. It is far "
"more easy to get nice blurring and bokeh results."
msgstr ""

#: ../../general_concepts/colors/scene_linear_painting.rst:50
msgid ""
"Simple Blending Modes like Multiply or Addition are suddenly black magic. "
"This is because Scene-Linear is the closest you can get to the physical (as "
"in, physics, not material) model of color where multiplying colors with one "
"another is one of the main ways to calculate the effect of light."
msgstr ""

#: ../../general_concepts/colors/scene_linear_painting.rst:51
msgid ""
"Combining painting with other image results such as photography and "
"physically based rendering is much easier as they too work in such a type of "
"colorspace. So you could use such images as a reference with little qualms, "
"or make textures that play nice with such a renderer."
msgstr ""

#: ../../general_concepts/colors/scene_linear_painting.rst:53
msgid ""
"So the advantages are prettier colors, cooler filter results, more control "
"and easier interchange with other methods."
msgstr ""

#: ../../general_concepts/colors/scene_linear_painting.rst:56
msgid "Okay, but why isn’t this all the rage then?"
msgstr ""

#: ../../general_concepts/colors/scene_linear_painting.rst:58
msgid ""
"Simply put, because while it’s easier in the long run, you will also have to "
"drop tools and change habits..."
msgstr ""

#: ../../general_concepts/colors/scene_linear_painting.rst:60
msgid ""
"In particular, there are many tools in a digital painter’s toolbox that have "
"**hard-coded assumptions about black and white**."
msgstr ""

#: ../../general_concepts/colors/scene_linear_painting.rst:62
msgid ""
"A very simple but massive problem is one with **inversion**. Inverting "
"colors is done code-wise by taking the color for white and subtracting the "
"color you want to invert from it. It’s used in many blending modes. But "
"often the color white is hardcoded in these filters. There’s currently no "
"application out there that allows you to define the value range that "
"inversion is done with, so inverting is useless. And that also means the "
"filters and blending modes that use it, such as (but not limited to)..."
msgstr ""

#: ../../general_concepts/colors/scene_linear_painting.rst:64
msgid "Screen (invert+multiply+invert)"
msgstr ""

#: ../../general_concepts/colors/scene_linear_painting.rst:65
msgid ""
"Overlay (screens values below midtone-value, in sRGB this would be middle "
"gray)"
msgstr ""

#: ../../general_concepts/colors/scene_linear_painting.rst:66
msgid "Color-dodge (divides the lower color with an inversion of the top one)"
msgstr ""

#: ../../general_concepts/colors/scene_linear_painting.rst:67
msgid ""
"Color-burn (inverts the lower color and then divides it by the top color)"
msgstr ""

#: ../../general_concepts/colors/scene_linear_painting.rst:68
msgid "Hardlight (A different way of doing overlay, including the inversion)"
msgstr ""

#: ../../general_concepts/colors/scene_linear_painting.rst:69
msgid "Softlight (Uses several inversions along the way)"
msgstr ""

#: ../../general_concepts/colors/scene_linear_painting.rst:71
msgid ""
"Conversely Multiply, Linear Dodge/Addition (they’re the same thing), "
"Subtract, Divide, Darker (only compares colors’ channel values), Lighter "
"(ditto), and Difference *are fine to use*, as long as the program you use "
"doesn’t do weird clipping there."
msgstr ""

#: ../../general_concepts/colors/scene_linear_painting.rst:73
msgid ""
"Another one is HSL, HSI and HSY algorithms. They too need to assume "
"something about the top value to allow scaling to white. HSV doesn’t have "
"this problem. So it’s best to use an HSV color selector."
msgstr ""

#: ../../general_concepts/colors/scene_linear_painting.rst:75
msgid ""
"For the blending modes that use HSY, there’s always the issue that they tend "
"to be hardcoded to sRGB/Rec709 values, but are otherwise fine (and they give "
"actually far more correct results in a linear space). So these are not a "
"good idea to use with wide-gamut colorspaces, and due to the assumption "
"about black and white, not with scene linear painting. The following "
"blending modes use them:"
msgstr ""

#: ../../general_concepts/colors/scene_linear_painting.rst:77
msgid "Color"
msgstr "Farba"

#: ../../general_concepts/colors/scene_linear_painting.rst:78
msgid "Luminosity"
msgstr "Jas"

#: ../../general_concepts/colors/scene_linear_painting.rst:79
msgid "Saturation"
msgstr "Sýtosť"

#: ../../general_concepts/colors/scene_linear_painting.rst:80
msgid "Darker Color (uses luminosity to determine the color)"
msgstr ""

#: ../../general_concepts/colors/scene_linear_painting.rst:81
msgid "Lighter Color (Ditto)"
msgstr ""

#: ../../general_concepts/colors/scene_linear_painting.rst:83
msgid ""
"So that is the blending modes. Many filters suffer from similar issues, and "
"in many applications, filters aren’t adjusted to work with arbitrary whites."
msgstr ""

#: ../../general_concepts/colors/scene_linear_painting.rst:85
msgid ""
"Speaking of filters, when using the transform tool, you should also avoid "
"using lanczos3, it’ll give a weird black halo to sharp contrasts in scene-"
"linear. The bilinear interpolation filter will work just fine in this case."
msgstr ""

#: ../../general_concepts/colors/scene_linear_painting.rst:87
msgid "The second big problem is that **black doesn’t work quite the same**."
msgstr ""

#: ../../general_concepts/colors/scene_linear_painting.rst:89
msgid ""
"If you have mixed pigments before, you will know that black can quite easily "
"overpower the other colors, so you should only add the tiniest amount of it "
"to a mixture. White in contrast gets dirtied quite easily."
msgstr ""

#: ../../general_concepts/colors/scene_linear_painting.rst:91
msgid ""
"In a Scene Linear Color space, this is flipped. White is now more "
"overpowering and black gets washed out super quickly. This relates to the "
"additive nature of digital color theory, that becomes more obvious when "
"working in linear."
msgstr ""

#: ../../general_concepts/colors/scene_linear_painting.rst:93
msgid ""
"This makes sketching a bit different, after all, it’s really difficult to "
"make marks now. To get around this, you can do the following:"
msgstr ""

#: ../../general_concepts/colors/scene_linear_painting.rst:95
msgid ""
"Sketch on a mid-gray background. This is recommended anyway, as it serves as "
"a neutral backdrop. For a linear space, 18% or 22% gray would be a good "
"neutral."
msgstr ""

#: ../../general_concepts/colors/scene_linear_painting.rst:96
msgid ""
"Make a special brush that is more opaque than the regular sketching brushes "
"you use."
msgstr ""

#: ../../general_concepts/colors/scene_linear_painting.rst:97
msgid "Or conversely, sketch with white instead."
msgstr ""

#: ../../general_concepts/colors/scene_linear_painting.rst:98
msgid ""
"For painting, block out the shapes with a big opaque brush before you start "
"doing your mixing."
msgstr ""

#: ../../general_concepts/colors/scene_linear_painting.rst:100
msgid ""
"Overall, this is something that will take a little while getting used to, "
"but you will get used to it soon enough."
msgstr ""

#: ../../general_concepts/colors/scene_linear_painting.rst:102
msgid "Finally, there’s the **issue of size**."
msgstr ""

#: ../../general_concepts/colors/scene_linear_painting.rst:104
msgid ""
"16 bit float per channel images are big. 32 bit float per channel images are "
"bigger. This means that they will eat RAM and that painting and filtering "
"will be slower. This is something that will fix itself over the years, but "
"not many people have such a high-end PC yet, so it can be a blocker."
msgstr ""

#: ../../general_concepts/colors/scene_linear_painting.rst:106
msgid "So the issues are tools, expectations and size."
msgstr ""

#: ../../general_concepts/colors/scene_linear_painting.rst:109
msgid "In Summary"
msgstr ""

#: ../../general_concepts/colors/scene_linear_painting.rst:111
msgid ""
"Scene Linear Painting is painting an image in a color space that is linear "
"and has a floating point bit depth. This does not assume anything about the "
"values of black and white, so you can only use tools that don’t assume "
"anything about the values of black and white. It has the advantage of having "
"nicer filter results and better color mixtures as well as better "
"interoperability with other scene-linear output."
msgstr ""

#: ../../general_concepts/colors/scene_linear_painting.rst:113
msgid ""
"To be able to view such an image you use a view transform, also called a "
"display conversion. Which means that if you wish to finalize your image for "
"the web, you make a copy of the image that goes through a display conversion "
"or view transform that then gets saved to png or jpeg or tiff."
msgstr ""

#: ../../general_concepts/colors/scene_linear_painting.rst:116
msgid "Getting to actual painting"
msgstr ""

#: ../../general_concepts/colors/scene_linear_painting.rst:118
msgid ""
"Now we’ve covered the theory, let us look at a workflow for painting scene "
"linear."
msgstr ""

#: ../../general_concepts/colors/scene_linear_painting.rst:121
msgid "Setting up the Canvas"
msgstr ""

#: ../../general_concepts/colors/scene_linear_painting.rst:123
msgid ""
"Select either a 16bit or 32bit image. By default Krita will select a linear "
"sRGB profile. This is fine."
msgstr ""

#: ../../general_concepts/colors/scene_linear_painting.rst:125
msgid ""
"Then, download an OCIO config. I will use `Filmic Blender <https://sobotka."
"github.io/filmic-blender/>`_ here because it is quite simple to set up. "
"Extract the downloaded zip somewhere you can find it back. Open the LUT "
"docker, turn on OCIO, select ‘OCIO’ and set the path to the downloaded OCIO "
"config."
msgstr ""

#: ../../general_concepts/colors/scene_linear_painting.rst:127
msgid ""
"Set the view to ‘Filmic log encoding’ and the look to ‘Base Contrast’. And "
"now you can start painting!"
msgstr ""

#: ../../general_concepts/colors/scene_linear_painting.rst:129
msgid ""
"Keep in mind everything mentioned above. Not all filters and not all "
"blending modes work. This will improve in the future. Other than that, "
"everything else is the same."
msgstr ""

#: ../../general_concepts/colors/scene_linear_painting.rst:132
msgid "Picking really bright colors"
msgstr ""

#: ../../general_concepts/colors/scene_linear_painting.rst:134
msgid ""
"Picking regular colors is easy, but how do we pick the really bright colors? "
"There are three ways of getting access to the really bright colors in Krita:"
msgstr ""

#: ../../general_concepts/colors/scene_linear_painting.rst:136
msgid ""
"By lowering the exposure in the LUT docker. This will increase the visible "
"range of colors in the color selectors. You can even hotkey the exposure in "
"the canvas input settings."
msgstr ""

#: ../../general_concepts/colors/scene_linear_painting.rst:137
msgid ""
"Or simply by opening the internal color selector by double clicking the dual "
"color button and typing in values higher than 1 into the field."
msgstr ""

#: ../../general_concepts/colors/scene_linear_painting.rst:138
msgid ""
"And finally by picking a really bright color from an image that has such "
"values."
msgstr ""

#: ../../general_concepts/colors/scene_linear_painting.rst:140
msgid ""
"Then paint. It’s recommended to make a bunch of swatches in the corner, at "
"the least, until Krita’s new palette docker allows you to save the values "
"properly."
msgstr ""

#: ../../general_concepts/colors/scene_linear_painting.rst:143
msgid "Lighting based workflow"
msgstr ""

#: ../../general_concepts/colors/scene_linear_painting.rst:145
msgid ""
"So, we have our typical value based workflow, where we only paint the grays "
"of the image so that we can focus on the values of the image. We can do "
"something similar with Scene Linear Painting."
msgstr ""

#: ../../general_concepts/colors/scene_linear_painting.rst:147
msgid ""
"Where with the value based workflow you paint the image as if it were a "
"grayscale of what you intended to paint, with a lighting based workflow you "
"paint as if all the objects are white. The effect of the color of an object "
"can be determined by multiplying its base color with the color of the light. "
"So you could paint objects as if they were white, paint the colors on a "
"separate layer and just use the multiply blending mode to get the right "
"colors."
msgstr ""

#: ../../general_concepts/colors/scene_linear_painting.rst:153
msgid ".. image:: images/en/color_category/Krita_scenelinear_cat_02.png"
msgstr ""

#: ../../general_concepts/colors/scene_linear_painting.rst:153
msgid ""
"The leftmost image is both the lighting based one and the color layer "
"separate, the middle with the two layers multiplied and the right a "
"luminosity based view. This cat is a nice example as it demonstrates why "
"having textures and lighting separate could be interesting."
msgstr ""

#: ../../general_concepts/colors/scene_linear_painting.rst:155
msgid ""
"You can even combine this with a value based workflow by opening a new view "
"and setting the component to luminosity. That way you can see both the "
"grayscale as well as the lighting based version of the image next to one "
"another."
msgstr ""

#: ../../general_concepts/colors/scene_linear_painting.rst:157
msgid ""
"The keen minded will notice that a lighting based workflow kind of resembles "
"the idea of a light pass and a color pass in 3d rendering. And indeed, it is "
"basically the same, so you can use lighting passes from 3d renders here, "
"just save them as EXR and import them as a layer. One of the examples where "
"scene linear painting simplifies combining methods."
msgstr ""

#: ../../general_concepts/colors/scene_linear_painting.rst:160
msgid "Finishing up"
msgstr "Ukončovanie"

#: ../../general_concepts/colors/scene_linear_painting.rst:162
msgid ""
"When you are done, you will want to apply the view transform you have been "
"using to the image (at the least, if you want to post the end result on the "
"internet)... This is called LUT baking and not possible yet in Krita. "
"Therefore you will have to save out your image in EXR and open it in either "
"Blender or Natron. Then, in Blender it is enough to just use the same OCIO "
"config, select the right values and save the result as a png."
msgstr ""

#: ../../general_concepts/colors/scene_linear_painting.rst:164
msgid ""
"You can even use some of Blender’s or Natron’s filters at this stage, and "
"when working with others, you would save out in EXR so that others can use "
"those."
msgstr ""
